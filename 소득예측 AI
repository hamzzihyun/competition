{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "authorship_tag": "ABX9TyMA9ctIwerr+Kr+ftcxg0fj",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/hamzzihyun/competition/blob/main/%EC%86%8C%EB%93%9D%EC%98%88%EC%B8%A1%20AI\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5EwnpdgKDCbH",
        "outputId": "6b727b2e-8b7c-4b48-cc41-35227a281ef3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install catboost optuna"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yP3hFWkbVoo2",
        "outputId": "3b81bddb-329b-4833-e71e-5d1c33c8a930"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting catboost\n",
            "  Downloading catboost-1.2.3-cp310-cp310-manylinux2014_x86_64.whl (98.5 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m98.5/98.5 MB\u001b[0m \u001b[31m8.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: graphviz in /usr/local/lib/python3.10/dist-packages (from catboost) (0.20.1)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from catboost) (3.7.1)\n",
            "Requirement already satisfied: numpy>=1.16.0 in /usr/local/lib/python3.10/dist-packages (from catboost) (1.25.2)\n",
            "Requirement already satisfied: pandas>=0.24 in /usr/local/lib/python3.10/dist-packages (from catboost) (1.5.3)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from catboost) (1.11.4)\n",
            "Requirement already satisfied: plotly in /usr/local/lib/python3.10/dist-packages (from catboost) (5.15.0)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from catboost) (1.16.0)\n",
            "Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2023.4)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (1.2.0)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (4.49.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (1.4.5)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (24.0)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (9.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (3.1.2)\n",
            "Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from plotly->catboost) (8.2.3)\n",
            "Installing collected packages: catboost\n",
            "Successfully installed catboost-1.2.3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split, cross_val_score\n",
        "from sklearn.metrics import mean_squared_error\n",
        "from sklearn.preprocessing import StandardScaler, MinMaxScaler\n",
        "from catboost import CatBoostRegressor\n",
        "import optuna\n",
        "import numpy as np\n",
        "import os\n",
        "import random\n",
        "\n",
        "RANDOM_SEED = 42\n",
        "os.environ['PYTHONHASHSEED'] = str(RANDOM_SEED)\n",
        "random.seed(RANDOM_SEED)\n",
        "np.random.seed(RANDOM_SEED)"
      ],
      "metadata": {
        "id": "Zws-LIk8DnVY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "K9xkteTxC-y8"
      },
      "outputs": [],
      "source": [
        "import zipfile\n",
        "with zipfile.ZipFile('/content/drive/MyDrive/Colab Notebooks/DACON/소득예측/open.zip') as z:\n",
        "  z.extractall()\n",
        "\n",
        "train_df = pd.read_csv('/content/open/train.csv')\n",
        "test_df = pd.read_csv('/content/open/test.csv')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 범주형 변수의 NaN값을 'missing'으로 채우기\n",
        "cat_features = [col for col in train_df.columns if train_df[col].dtype == 'object']\n",
        "train_df[cat_features] = train_df[cat_features].fillna('missing')\n",
        "test_df[cat_features] = test_df[cat_features].fillna('missing')\n",
        "\n",
        "# 수치형 변수 NaN값 처리\n",
        "num_features = [col for col in train_df.columns if col not in cat_features and col != 'ID' and col != 'Income']\n",
        "train_df[num_features] = train_df[num_features].fillna(train_df[num_features].median())\n",
        "test_df[num_features] = test_df[num_features].fillna(train_df[num_features].median())\n",
        "\n",
        "# 특성과 타겟 변수 분리\n",
        "X = train_df.drop(['Income', 'ID'], axis=1)\n",
        "y = train_df['Income']\n",
        "X_test = test_df.drop('ID', axis=1)\n",
        "\n",
        "# 수치형 변수와 범주형 변수 식별\n",
        "num_features = ['Age', 'Working_Week (Yearly)', 'Gains', 'Losses', 'Dividends']\n",
        "cat_features = [col for col in X.columns if col not in num_features]\n",
        "\n",
        "# 수치형 변수를 위한 표준화\n",
        "scaler = StandardScaler()\n",
        "X[num_features] = scaler.fit_transform(X[num_features])\n",
        "X_test[num_features] = scaler.transform(X_test[num_features])\n",
        "\n",
        "# 범주형 변수 처리\n",
        "for col in cat_features:\n",
        "    X[col] = X[col].astype('category')\n",
        "    X_test[col] = X_test[col].astype('category')"
      ],
      "metadata": {
        "id": "YXjyT9Lcql9p"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Optuna를 사용한 하이퍼파라미터 최적화 함수 정의\n",
        "def objective(trial):\n",
        "    params = {\n",
        "        'iterations': trial.suggest_int('iterations', 100, 1000),\n",
        "        'depth': trial.suggest_int('depth', 4, 10),\n",
        "        'learning_rate': trial.suggest_float('learning_rate', 0.01, 0.3),\n",
        "        'l2_leaf_reg': trial.suggest_int('l2_leaf_reg', 1, 10),\n",
        "        'border_count': trial.suggest_int('border_count', 32, 255),\n",
        "        'loss_function': 'RMSE',\n",
        "        'cat_features': cat_features,\n",
        "        'verbose': False,\n",
        "        \"random_state\": RANDOM_SEED,\n",
        "    }\n",
        "    model = CatBoostRegressor(**params)\n",
        "    scores = cross_val_score(model, X, y, cv=5, scoring='neg_root_mean_squared_error')\n",
        "    return abs(scores.mean())"
      ],
      "metadata": {
        "id": "BpfI4fdViZoC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Optuna 스터디 객체 생성 및 최적화 실행\n",
        "study = optuna.create_study(direction='minimize')\n",
        "study.optimize(objective, n_trials=10)  # 실험 횟수 조정 가능"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fT45fYIUiZlq",
        "outputId": "3baf1e02-341a-4a14-9f63-fe9373cb0a44"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[I 2024-03-14 01:13:27,011] A new study created in memory with name: no-name-37f360b7-ddb3-4332-a7e7-04b55caba96d\n",
            "[I 2024-03-14 01:13:47,567] Trial 0 finished with value: 592.8676688955169 and parameters: {'iterations': 117, 'depth': 10, 'learning_rate': 0.0617543700572372, 'l2_leaf_reg': 8, 'border_count': 249}. Best is trial 0 with value: 592.8676688955169.\n",
            "[I 2024-03-14 01:15:44,003] Trial 1 finished with value: 599.1264645283558 and parameters: {'iterations': 829, 'depth': 4, 'learning_rate': 0.26633468939366534, 'l2_leaf_reg': 1, 'border_count': 79}. Best is trial 0 with value: 592.8676688955169.\n",
            "[I 2024-03-14 01:26:24,231] Trial 2 finished with value: 602.9279078905813 and parameters: {'iterations': 749, 'depth': 10, 'learning_rate': 0.13033528285097526, 'l2_leaf_reg': 2, 'border_count': 115}. Best is trial 0 with value: 592.8676688955169.\n",
            "[I 2024-03-14 01:30:32,825] Trial 3 finished with value: 599.5489024274939 and parameters: {'iterations': 592, 'depth': 8, 'learning_rate': 0.27453011601216193, 'l2_leaf_reg': 10, 'border_count': 65}. Best is trial 0 with value: 592.8676688955169.\n",
            "[I 2024-03-14 01:30:46,643] Trial 4 finished with value: 593.5000909210647 and parameters: {'iterations': 172, 'depth': 7, 'learning_rate': 0.04017124163545838, 'l2_leaf_reg': 7, 'border_count': 164}. Best is trial 0 with value: 592.8676688955169.\n",
            "[I 2024-03-14 01:32:49,273] Trial 5 finished with value: 594.083715680469 and parameters: {'iterations': 970, 'depth': 4, 'learning_rate': 0.18801975968540466, 'l2_leaf_reg': 6, 'border_count': 42}. Best is trial 0 with value: 592.8676688955169.\n",
            "[I 2024-03-14 01:34:56,547] Trial 6 finished with value: 592.6782830267402 and parameters: {'iterations': 757, 'depth': 5, 'learning_rate': 0.14452917211309507, 'l2_leaf_reg': 8, 'border_count': 169}. Best is trial 6 with value: 592.6782830267402.\n",
            "[I 2024-03-14 01:39:20,670] Trial 7 finished with value: 591.3986506243925 and parameters: {'iterations': 334, 'depth': 10, 'learning_rate': 0.059068219417574966, 'l2_leaf_reg': 4, 'border_count': 53}. Best is trial 7 with value: 591.3986506243925.\n",
            "[I 2024-03-14 01:47:26,798] Trial 8 finished with value: 603.6817000546164 and parameters: {'iterations': 563, 'depth': 10, 'learning_rate': 0.20662878469713153, 'l2_leaf_reg': 5, 'border_count': 52}. Best is trial 7 with value: 591.3986506243925.\n",
            "[I 2024-03-14 01:57:57,225] Trial 9 finished with value: 613.0286719089723 and parameters: {'iterations': 941, 'depth': 9, 'learning_rate': 0.2915515979603013, 'l2_leaf_reg': 9, 'border_count': 131}. Best is trial 7 with value: 591.3986506243925.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 최적의 하이퍼파라미터 적용\n",
        "best_params = study.best_params\n",
        "model = CatBoostRegressor(**best_params, cat_features=cat_features)\n",
        "model.fit(X, y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "24_VeiC9iigq",
        "outputId": "8188caad-de44-4bb2-b075-a1005e10c3f7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0:\tlearn: 690.9134101\ttotal: 153ms\tremaining: 50.9s\n",
            "1:\tlearn: 681.7783472\ttotal: 294ms\tremaining: 48.8s\n",
            "2:\tlearn: 672.4279336\ttotal: 441ms\tremaining: 48.7s\n",
            "3:\tlearn: 664.4865960\ttotal: 586ms\tremaining: 48.3s\n",
            "4:\tlearn: 657.4232974\ttotal: 751ms\tremaining: 49.4s\n",
            "5:\tlearn: 651.0967169\ttotal: 903ms\tremaining: 49.4s\n",
            "6:\tlearn: 645.5704307\ttotal: 1.02s\tremaining: 47.8s\n",
            "7:\tlearn: 640.1896196\ttotal: 1.17s\tremaining: 47.6s\n",
            "8:\tlearn: 635.6033311\ttotal: 1.38s\tremaining: 49.7s\n",
            "9:\tlearn: 631.3288405\ttotal: 1.64s\tremaining: 53s\n",
            "10:\tlearn: 627.6174096\ttotal: 1.87s\tremaining: 55s\n",
            "11:\tlearn: 623.4530705\ttotal: 2.13s\tremaining: 57.1s\n",
            "12:\tlearn: 619.8578632\ttotal: 2.41s\tremaining: 59.6s\n",
            "13:\tlearn: 616.4616734\ttotal: 2.67s\tremaining: 1m 1s\n",
            "14:\tlearn: 613.7258895\ttotal: 2.92s\tremaining: 1m 2s\n",
            "15:\tlearn: 611.1682748\ttotal: 3.17s\tremaining: 1m 3s\n",
            "16:\tlearn: 608.9861150\ttotal: 3.48s\tremaining: 1m 4s\n",
            "17:\tlearn: 606.8155762\ttotal: 3.76s\tremaining: 1m 5s\n",
            "18:\tlearn: 604.6365999\ttotal: 4.05s\tremaining: 1m 7s\n",
            "19:\tlearn: 602.4589378\ttotal: 4.29s\tremaining: 1m 7s\n",
            "20:\tlearn: 600.7993744\ttotal: 4.52s\tremaining: 1m 7s\n",
            "21:\tlearn: 599.5764542\ttotal: 4.7s\tremaining: 1m 6s\n",
            "22:\tlearn: 598.1980016\ttotal: 4.86s\tremaining: 1m 5s\n",
            "23:\tlearn: 597.0715280\ttotal: 5.02s\tremaining: 1m 4s\n",
            "24:\tlearn: 595.6247036\ttotal: 5.19s\tremaining: 1m 4s\n",
            "25:\tlearn: 594.2200305\ttotal: 5.34s\tremaining: 1m 3s\n",
            "26:\tlearn: 592.7056580\ttotal: 5.5s\tremaining: 1m 2s\n",
            "27:\tlearn: 591.4183564\ttotal: 5.67s\tremaining: 1m 1s\n",
            "28:\tlearn: 590.5991573\ttotal: 5.83s\tremaining: 1m 1s\n",
            "29:\tlearn: 589.6519454\ttotal: 5.98s\tremaining: 1m\n",
            "30:\tlearn: 588.6937593\ttotal: 6.15s\tremaining: 1m\n",
            "31:\tlearn: 588.1195552\ttotal: 6.28s\tremaining: 59.3s\n",
            "32:\tlearn: 587.3819887\ttotal: 6.43s\tremaining: 58.7s\n",
            "33:\tlearn: 586.6679122\ttotal: 6.6s\tremaining: 58.2s\n",
            "34:\tlearn: 586.1362404\ttotal: 6.77s\tremaining: 57.9s\n",
            "35:\tlearn: 585.2558423\ttotal: 6.94s\tremaining: 57.4s\n",
            "36:\tlearn: 584.6646936\ttotal: 7.11s\tremaining: 57s\n",
            "37:\tlearn: 584.0592268\ttotal: 7.28s\tremaining: 56.7s\n",
            "38:\tlearn: 583.0540141\ttotal: 7.44s\tremaining: 56.3s\n",
            "39:\tlearn: 582.5200087\ttotal: 7.64s\tremaining: 56.2s\n",
            "40:\tlearn: 581.9552272\ttotal: 7.81s\tremaining: 55.8s\n",
            "41:\tlearn: 581.4711672\ttotal: 7.99s\tremaining: 55.5s\n",
            "42:\tlearn: 580.7939130\ttotal: 8.17s\tremaining: 55.3s\n",
            "43:\tlearn: 580.5829468\ttotal: 8.3s\tremaining: 54.7s\n",
            "44:\tlearn: 580.0729985\ttotal: 8.49s\tremaining: 54.5s\n",
            "45:\tlearn: 579.8281406\ttotal: 8.68s\tremaining: 54.3s\n",
            "46:\tlearn: 579.3774515\ttotal: 8.86s\tremaining: 54.1s\n",
            "47:\tlearn: 579.1317652\ttotal: 9.02s\tremaining: 53.7s\n",
            "48:\tlearn: 578.9196306\ttotal: 9.19s\tremaining: 53.4s\n",
            "49:\tlearn: 578.4066669\ttotal: 9.36s\tremaining: 53.1s\n",
            "50:\tlearn: 578.2380973\ttotal: 9.54s\tremaining: 52.9s\n",
            "51:\tlearn: 577.9137936\ttotal: 9.72s\tremaining: 52.7s\n",
            "52:\tlearn: 577.7742254\ttotal: 9.75s\tremaining: 51.7s\n",
            "53:\tlearn: 577.3073206\ttotal: 9.92s\tremaining: 51.4s\n",
            "54:\tlearn: 577.2084853\ttotal: 10.1s\tremaining: 51.1s\n",
            "55:\tlearn: 576.6117997\ttotal: 10.2s\tremaining: 50.8s\n",
            "56:\tlearn: 575.7294724\ttotal: 10.4s\tremaining: 50.7s\n",
            "57:\tlearn: 574.8930473\ttotal: 10.6s\tremaining: 50.5s\n",
            "58:\tlearn: 574.6464192\ttotal: 10.8s\tremaining: 50.3s\n",
            "59:\tlearn: 574.0548779\ttotal: 10.9s\tremaining: 50s\n",
            "60:\tlearn: 574.0474648\ttotal: 11s\tremaining: 49s\n",
            "61:\tlearn: 573.9712158\ttotal: 11.1s\tremaining: 48.9s\n",
            "62:\tlearn: 573.8119364\ttotal: 11.3s\tremaining: 48.7s\n",
            "63:\tlearn: 573.5717712\ttotal: 11.5s\tremaining: 48.4s\n",
            "64:\tlearn: 573.4350276\ttotal: 11.6s\tremaining: 48.2s\n",
            "65:\tlearn: 572.5753180\ttotal: 11.8s\tremaining: 48s\n",
            "66:\tlearn: 572.3030890\ttotal: 12s\tremaining: 47.8s\n",
            "67:\tlearn: 572.2034255\ttotal: 12.2s\tremaining: 47.7s\n",
            "68:\tlearn: 571.9793220\ttotal: 12.4s\tremaining: 47.5s\n",
            "69:\tlearn: 571.9261050\ttotal: 12.4s\tremaining: 46.8s\n",
            "70:\tlearn: 571.8067069\ttotal: 12.6s\tremaining: 46.6s\n",
            "71:\tlearn: 571.6939823\ttotal: 12.8s\tremaining: 46.5s\n",
            "72:\tlearn: 571.5532567\ttotal: 12.9s\tremaining: 46.3s\n",
            "73:\tlearn: 571.5109760\ttotal: 13s\tremaining: 45.6s\n",
            "74:\tlearn: 571.2332586\ttotal: 13.2s\tremaining: 45.4s\n",
            "75:\tlearn: 570.8707322\ttotal: 13.4s\tremaining: 45.4s\n",
            "76:\tlearn: 570.7299736\ttotal: 13.5s\tremaining: 45.2s\n",
            "77:\tlearn: 570.7279404\ttotal: 13.6s\tremaining: 44.6s\n",
            "78:\tlearn: 570.6168617\ttotal: 13.8s\tremaining: 44.4s\n",
            "79:\tlearn: 570.4462094\ttotal: 13.9s\tremaining: 44.2s\n",
            "80:\tlearn: 570.4435498\ttotal: 14s\tremaining: 43.7s\n",
            "81:\tlearn: 570.2103418\ttotal: 14.2s\tremaining: 43.5s\n",
            "82:\tlearn: 569.9897009\ttotal: 14.3s\tremaining: 43.3s\n",
            "83:\tlearn: 569.8734274\ttotal: 14.5s\tremaining: 43.3s\n",
            "84:\tlearn: 569.6230252\ttotal: 14.8s\tremaining: 43.4s\n",
            "85:\tlearn: 569.5195076\ttotal: 15.1s\tremaining: 43.5s\n",
            "86:\tlearn: 569.1717337\ttotal: 15.4s\tremaining: 43.6s\n",
            "87:\tlearn: 569.0298707\ttotal: 15.7s\tremaining: 43.9s\n",
            "88:\tlearn: 568.9450188\ttotal: 16s\tremaining: 44s\n",
            "89:\tlearn: 568.1534147\ttotal: 16.3s\tremaining: 44.3s\n",
            "90:\tlearn: 567.9891913\ttotal: 16.7s\tremaining: 44.5s\n",
            "91:\tlearn: 567.9887426\ttotal: 16.7s\tremaining: 43.9s\n",
            "92:\tlearn: 567.5320694\ttotal: 16.9s\tremaining: 43.9s\n",
            "93:\tlearn: 567.5256871\ttotal: 17s\tremaining: 43.4s\n",
            "94:\tlearn: 567.5224177\ttotal: 17s\tremaining: 42.8s\n",
            "95:\tlearn: 567.4206098\ttotal: 17.3s\tremaining: 42.9s\n",
            "96:\tlearn: 567.4179945\ttotal: 17.4s\tremaining: 42.5s\n",
            "97:\tlearn: 567.3350720\ttotal: 17.7s\tremaining: 42.6s\n",
            "98:\tlearn: 567.3279881\ttotal: 17.8s\tremaining: 42.2s\n",
            "99:\tlearn: 567.2796921\ttotal: 17.9s\tremaining: 41.8s\n",
            "100:\tlearn: 567.1698470\ttotal: 18s\tremaining: 41.6s\n",
            "101:\tlearn: 566.9082316\ttotal: 18.2s\tremaining: 41.4s\n",
            "102:\tlearn: 566.7628942\ttotal: 18.4s\tremaining: 41.2s\n",
            "103:\tlearn: 566.6763396\ttotal: 18.6s\tremaining: 41s\n",
            "104:\tlearn: 566.5076131\ttotal: 18.8s\tremaining: 40.9s\n",
            "105:\tlearn: 565.9653036\ttotal: 18.9s\tremaining: 40.7s\n",
            "106:\tlearn: 565.5931354\ttotal: 19.1s\tremaining: 40.6s\n",
            "107:\tlearn: 565.3755488\ttotal: 19.3s\tremaining: 40.4s\n",
            "108:\tlearn: 565.0862306\ttotal: 19.5s\tremaining: 40.2s\n",
            "109:\tlearn: 564.9251990\ttotal: 19.6s\tremaining: 40s\n",
            "110:\tlearn: 564.7973477\ttotal: 19.8s\tremaining: 39.8s\n",
            "111:\tlearn: 564.6667985\ttotal: 20s\tremaining: 39.7s\n",
            "112:\tlearn: 564.5162466\ttotal: 20.2s\tremaining: 39.4s\n",
            "113:\tlearn: 564.4616008\ttotal: 20.2s\tremaining: 39.1s\n",
            "114:\tlearn: 564.4069772\ttotal: 20.4s\tremaining: 38.9s\n",
            "115:\tlearn: 564.2614759\ttotal: 20.6s\tremaining: 38.7s\n",
            "116:\tlearn: 564.2602887\ttotal: 20.6s\tremaining: 38.3s\n",
            "117:\tlearn: 564.0955132\ttotal: 20.8s\tremaining: 38.1s\n",
            "118:\tlearn: 563.9671327\ttotal: 21s\tremaining: 38s\n",
            "119:\tlearn: 563.7112494\ttotal: 21.2s\tremaining: 37.8s\n",
            "120:\tlearn: 563.3767832\ttotal: 21.4s\tremaining: 37.6s\n",
            "121:\tlearn: 563.3705191\ttotal: 21.4s\tremaining: 37.1s\n",
            "122:\tlearn: 563.3114246\ttotal: 21.5s\tremaining: 36.9s\n",
            "123:\tlearn: 563.2321127\ttotal: 21.7s\tremaining: 36.8s\n",
            "124:\tlearn: 563.2319617\ttotal: 21.7s\tremaining: 36.4s\n",
            "125:\tlearn: 562.9748747\ttotal: 21.9s\tremaining: 36.2s\n",
            "126:\tlearn: 562.9313705\ttotal: 22.1s\tremaining: 36s\n",
            "127:\tlearn: 562.8356676\ttotal: 22.3s\tremaining: 35.8s\n",
            "128:\tlearn: 562.7841624\ttotal: 22.4s\tremaining: 35.6s\n",
            "129:\tlearn: 562.5847529\ttotal: 22.6s\tremaining: 35.4s\n",
            "130:\tlearn: 562.4667186\ttotal: 22.7s\tremaining: 35.2s\n",
            "131:\tlearn: 562.1147244\ttotal: 22.9s\tremaining: 35s\n",
            "132:\tlearn: 561.8370279\ttotal: 23s\tremaining: 34.8s\n",
            "133:\tlearn: 561.6464303\ttotal: 23.2s\tremaining: 34.6s\n",
            "134:\tlearn: 561.5935975\ttotal: 23.4s\tremaining: 34.5s\n",
            "135:\tlearn: 561.5172390\ttotal: 23.5s\tremaining: 34.3s\n",
            "136:\tlearn: 561.3059643\ttotal: 23.7s\tremaining: 34.1s\n",
            "137:\tlearn: 560.7676866\ttotal: 23.9s\tremaining: 33.9s\n",
            "138:\tlearn: 560.6431981\ttotal: 24.1s\tremaining: 33.8s\n",
            "139:\tlearn: 560.5578456\ttotal: 24.3s\tremaining: 33.6s\n",
            "140:\tlearn: 560.3926969\ttotal: 24.4s\tremaining: 33.5s\n",
            "141:\tlearn: 560.3512493\ttotal: 24.5s\tremaining: 33.1s\n",
            "142:\tlearn: 560.2583614\ttotal: 24.7s\tremaining: 33s\n",
            "143:\tlearn: 560.2583597\ttotal: 24.7s\tremaining: 32.6s\n",
            "144:\tlearn: 560.1831245\ttotal: 24.9s\tremaining: 32.4s\n",
            "145:\tlearn: 559.9298577\ttotal: 25.1s\tremaining: 32.3s\n",
            "146:\tlearn: 559.5979741\ttotal: 25.3s\tremaining: 32.1s\n",
            "147:\tlearn: 559.4754904\ttotal: 25.4s\tremaining: 32s\n",
            "148:\tlearn: 559.4155045\ttotal: 25.6s\tremaining: 31.8s\n",
            "149:\tlearn: 559.0353362\ttotal: 25.8s\tremaining: 31.7s\n",
            "150:\tlearn: 559.0301806\ttotal: 25.9s\tremaining: 31.3s\n",
            "151:\tlearn: 558.6877411\ttotal: 26s\tremaining: 31.2s\n",
            "152:\tlearn: 558.5610715\ttotal: 26.2s\tremaining: 31s\n",
            "153:\tlearn: 558.3903434\ttotal: 26.4s\tremaining: 30.8s\n",
            "154:\tlearn: 558.2227956\ttotal: 26.6s\tremaining: 30.7s\n",
            "155:\tlearn: 558.0362171\ttotal: 26.8s\tremaining: 30.5s\n",
            "156:\tlearn: 557.8615021\ttotal: 27s\tremaining: 30.4s\n",
            "157:\tlearn: 557.7898828\ttotal: 27.1s\tremaining: 30.2s\n",
            "158:\tlearn: 557.7317951\ttotal: 27.3s\tremaining: 30.1s\n",
            "159:\tlearn: 557.6511542\ttotal: 27.5s\tremaining: 29.9s\n",
            "160:\tlearn: 557.6053115\ttotal: 27.7s\tremaining: 29.7s\n",
            "161:\tlearn: 557.4516204\ttotal: 27.9s\tremaining: 29.6s\n",
            "162:\tlearn: 557.4068646\ttotal: 28.2s\tremaining: 29.5s\n",
            "163:\tlearn: 557.2849036\ttotal: 28.5s\tremaining: 29.5s\n",
            "164:\tlearn: 556.9746495\ttotal: 28.8s\tremaining: 29.5s\n",
            "165:\tlearn: 556.8953032\ttotal: 29.1s\tremaining: 29.5s\n",
            "166:\tlearn: 556.8541766\ttotal: 29.3s\tremaining: 29.3s\n",
            "167:\tlearn: 556.4904627\ttotal: 29.6s\tremaining: 29.2s\n",
            "168:\tlearn: 556.3888282\ttotal: 29.9s\tremaining: 29.2s\n",
            "169:\tlearn: 556.3803325\ttotal: 29.9s\tremaining: 28.9s\n",
            "170:\tlearn: 556.3801030\ttotal: 30s\tremaining: 28.6s\n",
            "171:\tlearn: 556.1698010\ttotal: 30.3s\tremaining: 28.5s\n",
            "172:\tlearn: 556.1301773\ttotal: 30.6s\tremaining: 28.5s\n",
            "173:\tlearn: 556.0177606\ttotal: 30.9s\tremaining: 28.4s\n",
            "174:\tlearn: 555.9879009\ttotal: 31.1s\tremaining: 28.2s\n",
            "175:\tlearn: 555.9605065\ttotal: 31.3s\tremaining: 28.1s\n",
            "176:\tlearn: 555.8624751\ttotal: 31.5s\tremaining: 27.9s\n",
            "177:\tlearn: 555.6685025\ttotal: 31.7s\tremaining: 27.8s\n",
            "178:\tlearn: 555.5452113\ttotal: 31.8s\tremaining: 27.6s\n",
            "179:\tlearn: 555.4166883\ttotal: 32s\tremaining: 27.4s\n",
            "180:\tlearn: 555.3570760\ttotal: 32.2s\tremaining: 27.2s\n",
            "181:\tlearn: 555.2457964\ttotal: 32.4s\tremaining: 27s\n",
            "182:\tlearn: 555.0153236\ttotal: 32.5s\tremaining: 26.9s\n",
            "183:\tlearn: 555.0151606\ttotal: 32.6s\tremaining: 26.6s\n",
            "184:\tlearn: 554.8733828\ttotal: 32.8s\tremaining: 26.4s\n",
            "185:\tlearn: 554.8723245\ttotal: 32.8s\tremaining: 26.1s\n",
            "186:\tlearn: 554.8120635\ttotal: 33s\tremaining: 25.9s\n",
            "187:\tlearn: 554.7550004\ttotal: 33.2s\tremaining: 25.8s\n",
            "188:\tlearn: 554.6514142\ttotal: 33.4s\tremaining: 25.6s\n",
            "189:\tlearn: 554.5384206\ttotal: 33.6s\tremaining: 25.4s\n",
            "190:\tlearn: 554.4312946\ttotal: 33.8s\tremaining: 25.3s\n",
            "191:\tlearn: 554.2974114\ttotal: 33.9s\tremaining: 25.1s\n",
            "192:\tlearn: 554.1540901\ttotal: 34.1s\tremaining: 24.9s\n",
            "193:\tlearn: 553.7883729\ttotal: 34.3s\tremaining: 24.8s\n",
            "194:\tlearn: 553.6288352\ttotal: 34.5s\tremaining: 24.6s\n",
            "195:\tlearn: 553.5598557\ttotal: 34.7s\tremaining: 24.4s\n",
            "196:\tlearn: 553.5246235\ttotal: 34.9s\tremaining: 24.3s\n",
            "197:\tlearn: 553.3544136\ttotal: 35s\tremaining: 24.1s\n",
            "198:\tlearn: 553.3093955\ttotal: 35.2s\tremaining: 23.9s\n",
            "199:\tlearn: 553.2154485\ttotal: 35.4s\tremaining: 23.7s\n",
            "200:\tlearn: 553.1954247\ttotal: 35.6s\tremaining: 23.6s\n",
            "201:\tlearn: 553.1525123\ttotal: 35.8s\tremaining: 23.4s\n",
            "202:\tlearn: 553.1173271\ttotal: 35.8s\tremaining: 23.1s\n",
            "203:\tlearn: 552.5795025\ttotal: 36s\tremaining: 22.9s\n",
            "204:\tlearn: 552.4830032\ttotal: 36.1s\tremaining: 22.7s\n",
            "205:\tlearn: 552.3550756\ttotal: 36.3s\tremaining: 22.6s\n",
            "206:\tlearn: 552.3258398\ttotal: 36.5s\tremaining: 22.4s\n",
            "207:\tlearn: 552.2446524\ttotal: 36.7s\tremaining: 22.2s\n",
            "208:\tlearn: 552.0936888\ttotal: 36.8s\tremaining: 22s\n",
            "209:\tlearn: 552.0780031\ttotal: 37s\tremaining: 21.8s\n",
            "210:\tlearn: 552.0414025\ttotal: 37.2s\tremaining: 21.7s\n",
            "211:\tlearn: 551.9974617\ttotal: 37.4s\tremaining: 21.5s\n",
            "212:\tlearn: 551.8760020\ttotal: 37.5s\tremaining: 21.3s\n",
            "213:\tlearn: 551.7931374\ttotal: 37.7s\tremaining: 21.2s\n",
            "214:\tlearn: 551.7512720\ttotal: 37.9s\tremaining: 21s\n",
            "215:\tlearn: 551.6246542\ttotal: 38.1s\tremaining: 20.8s\n",
            "216:\tlearn: 551.5015142\ttotal: 38.3s\tremaining: 20.6s\n",
            "217:\tlearn: 551.4478109\ttotal: 38.4s\tremaining: 20.5s\n",
            "218:\tlearn: 551.1792246\ttotal: 38.6s\tremaining: 20.3s\n",
            "219:\tlearn: 551.0829004\ttotal: 38.8s\tremaining: 20.1s\n",
            "220:\tlearn: 551.0786272\ttotal: 39s\tremaining: 19.9s\n",
            "221:\tlearn: 550.6741836\ttotal: 39.2s\tremaining: 19.8s\n",
            "222:\tlearn: 550.5627940\ttotal: 39.4s\tremaining: 19.6s\n",
            "223:\tlearn: 550.4445239\ttotal: 39.5s\tremaining: 19.4s\n",
            "224:\tlearn: 550.4128123\ttotal: 39.7s\tremaining: 19.2s\n",
            "225:\tlearn: 550.1309134\ttotal: 39.9s\tremaining: 19.1s\n",
            "226:\tlearn: 550.0193721\ttotal: 40.1s\tremaining: 18.9s\n",
            "227:\tlearn: 549.7297718\ttotal: 40.2s\tremaining: 18.7s\n",
            "228:\tlearn: 549.6280265\ttotal: 40.4s\tremaining: 18.5s\n",
            "229:\tlearn: 549.6052717\ttotal: 40.6s\tremaining: 18.4s\n",
            "230:\tlearn: 549.5271516\ttotal: 40.8s\tremaining: 18.2s\n",
            "231:\tlearn: 549.4462952\ttotal: 41s\tremaining: 18s\n",
            "232:\tlearn: 548.8818826\ttotal: 41.3s\tremaining: 17.9s\n",
            "233:\tlearn: 548.8662526\ttotal: 41.7s\tremaining: 17.8s\n",
            "234:\tlearn: 548.8484207\ttotal: 42s\tremaining: 17.7s\n",
            "235:\tlearn: 548.7692483\ttotal: 42.3s\tremaining: 17.6s\n",
            "236:\tlearn: 548.4036648\ttotal: 42.6s\tremaining: 17.4s\n",
            "237:\tlearn: 548.3949229\ttotal: 43s\tremaining: 17.3s\n",
            "238:\tlearn: 548.2203309\ttotal: 43.2s\tremaining: 17.2s\n",
            "239:\tlearn: 548.1130968\ttotal: 43.5s\tremaining: 17.1s\n",
            "240:\tlearn: 548.0308551\ttotal: 43.9s\tremaining: 16.9s\n",
            "241:\tlearn: 547.9494444\ttotal: 44.1s\tremaining: 16.8s\n",
            "242:\tlearn: 547.9171630\ttotal: 44.3s\tremaining: 16.6s\n",
            "243:\tlearn: 547.8998293\ttotal: 44.5s\tremaining: 16.4s\n",
            "244:\tlearn: 547.7979084\ttotal: 44.7s\tremaining: 16.2s\n",
            "245:\tlearn: 547.7974185\ttotal: 44.9s\tremaining: 16s\n",
            "246:\tlearn: 547.3322317\ttotal: 45s\tremaining: 15.9s\n",
            "247:\tlearn: 547.2721736\ttotal: 45.2s\tremaining: 15.7s\n",
            "248:\tlearn: 547.0652023\ttotal: 45.4s\tremaining: 15.5s\n",
            "249:\tlearn: 546.9016916\ttotal: 45.6s\tremaining: 15.3s\n",
            "250:\tlearn: 546.8903747\ttotal: 45.7s\tremaining: 15.1s\n",
            "251:\tlearn: 546.8579885\ttotal: 45.9s\tremaining: 14.9s\n",
            "252:\tlearn: 546.8219891\ttotal: 46.1s\tremaining: 14.8s\n",
            "253:\tlearn: 546.7612089\ttotal: 46.3s\tremaining: 14.6s\n",
            "254:\tlearn: 546.7500207\ttotal: 46.4s\tremaining: 14.4s\n",
            "255:\tlearn: 546.7387038\ttotal: 46.6s\tremaining: 14.2s\n",
            "256:\tlearn: 546.6095963\ttotal: 46.8s\tremaining: 14s\n",
            "257:\tlearn: 546.5146694\ttotal: 47s\tremaining: 13.8s\n",
            "258:\tlearn: 546.5124973\ttotal: 47.2s\tremaining: 13.7s\n",
            "259:\tlearn: 546.3572452\ttotal: 47.3s\tremaining: 13.5s\n",
            "260:\tlearn: 546.2422459\ttotal: 47.5s\tremaining: 13.3s\n",
            "261:\tlearn: 546.2307416\ttotal: 47.7s\tremaining: 13.1s\n",
            "262:\tlearn: 546.2036931\ttotal: 47.9s\tremaining: 12.9s\n",
            "263:\tlearn: 546.1828942\ttotal: 48.1s\tremaining: 12.7s\n",
            "264:\tlearn: 546.1721848\ttotal: 48.2s\tremaining: 12.6s\n",
            "265:\tlearn: 546.0490744\ttotal: 48.4s\tremaining: 12.4s\n",
            "266:\tlearn: 545.9683915\ttotal: 48.6s\tremaining: 12.2s\n",
            "267:\tlearn: 545.9013439\ttotal: 48.8s\tremaining: 12s\n",
            "268:\tlearn: 545.8135170\ttotal: 49s\tremaining: 11.8s\n",
            "269:\tlearn: 545.8119820\ttotal: 49.1s\tremaining: 11.6s\n",
            "270:\tlearn: 545.7979060\ttotal: 49.3s\tremaining: 11.5s\n",
            "271:\tlearn: 545.7163266\ttotal: 49.5s\tremaining: 11.3s\n",
            "272:\tlearn: 545.5979560\ttotal: 49.6s\tremaining: 11.1s\n",
            "273:\tlearn: 545.5798368\ttotal: 49.8s\tremaining: 10.9s\n",
            "274:\tlearn: 545.4515230\ttotal: 50s\tremaining: 10.7s\n",
            "275:\tlearn: 545.3283549\ttotal: 50.2s\tremaining: 10.5s\n",
            "276:\tlearn: 545.2349678\ttotal: 50.3s\tremaining: 10.4s\n",
            "277:\tlearn: 545.2256867\ttotal: 50.5s\tremaining: 10.2s\n",
            "278:\tlearn: 544.8005118\ttotal: 50.7s\tremaining: 9.99s\n",
            "279:\tlearn: 544.0976325\ttotal: 50.8s\tremaining: 9.8s\n",
            "280:\tlearn: 544.0798659\ttotal: 51s\tremaining: 9.62s\n",
            "281:\tlearn: 544.0650242\ttotal: 51.2s\tremaining: 9.44s\n",
            "282:\tlearn: 544.0614098\ttotal: 51.4s\tremaining: 9.26s\n",
            "283:\tlearn: 543.9509466\ttotal: 51.5s\tremaining: 9.07s\n",
            "284:\tlearn: 543.8007887\ttotal: 51.7s\tremaining: 8.89s\n",
            "285:\tlearn: 543.6165516\ttotal: 51.9s\tremaining: 8.71s\n",
            "286:\tlearn: 543.5471267\ttotal: 52.1s\tremaining: 8.53s\n",
            "287:\tlearn: 543.4452309\ttotal: 52.3s\tremaining: 8.35s\n",
            "288:\tlearn: 543.4268310\ttotal: 52.5s\tremaining: 8.17s\n",
            "289:\tlearn: 543.3660250\ttotal: 52.7s\tremaining: 7.99s\n",
            "290:\tlearn: 543.3097554\ttotal: 52.8s\tremaining: 7.81s\n",
            "291:\tlearn: 543.3094874\ttotal: 53s\tremaining: 7.63s\n",
            "292:\tlearn: 543.1942085\ttotal: 53.2s\tremaining: 7.44s\n",
            "293:\tlearn: 543.1861770\ttotal: 53.4s\tremaining: 7.26s\n",
            "294:\tlearn: 543.1853385\ttotal: 53.6s\tremaining: 7.08s\n",
            "295:\tlearn: 543.1833440\ttotal: 53.8s\tremaining: 6.9s\n",
            "296:\tlearn: 542.9851679\ttotal: 53.9s\tremaining: 6.72s\n",
            "297:\tlearn: 542.9452285\ttotal: 54.2s\tremaining: 6.54s\n",
            "298:\tlearn: 542.9432059\ttotal: 54.5s\tremaining: 6.38s\n",
            "299:\tlearn: 542.9239447\ttotal: 54.8s\tremaining: 6.21s\n",
            "300:\tlearn: 542.8684760\ttotal: 55.1s\tremaining: 6.04s\n",
            "301:\tlearn: 542.7072808\ttotal: 55.5s\tremaining: 5.88s\n",
            "302:\tlearn: 542.6516311\ttotal: 55.8s\tremaining: 5.71s\n",
            "303:\tlearn: 542.5986934\ttotal: 56.1s\tremaining: 5.54s\n",
            "304:\tlearn: 542.5029163\ttotal: 56.4s\tremaining: 5.36s\n",
            "305:\tlearn: 542.4936268\ttotal: 56.7s\tremaining: 5.19s\n",
            "306:\tlearn: 542.4134083\ttotal: 57s\tremaining: 5.01s\n",
            "307:\tlearn: 542.3260945\ttotal: 57.3s\tremaining: 4.83s\n",
            "308:\tlearn: 542.3207498\ttotal: 57.4s\tremaining: 4.65s\n",
            "309:\tlearn: 542.2894495\ttotal: 57.6s\tremaining: 4.46s\n",
            "310:\tlearn: 542.1945862\ttotal: 57.8s\tremaining: 4.28s\n",
            "311:\tlearn: 542.1932873\ttotal: 58s\tremaining: 4.09s\n",
            "312:\tlearn: 542.1424330\ttotal: 58.2s\tremaining: 3.9s\n",
            "313:\tlearn: 542.0753043\ttotal: 58.4s\tremaining: 3.72s\n",
            "314:\tlearn: 542.0575858\ttotal: 58.5s\tremaining: 3.53s\n",
            "315:\tlearn: 542.0079646\ttotal: 58.7s\tremaining: 3.35s\n",
            "316:\tlearn: 541.9883162\ttotal: 58.9s\tremaining: 3.16s\n",
            "317:\tlearn: 541.9813652\ttotal: 59.1s\tremaining: 2.97s\n",
            "318:\tlearn: 541.9811535\ttotal: 59.3s\tremaining: 2.79s\n",
            "319:\tlearn: 541.8906904\ttotal: 59.5s\tremaining: 2.6s\n",
            "320:\tlearn: 541.5150086\ttotal: 59.6s\tremaining: 2.42s\n",
            "321:\tlearn: 541.4950106\ttotal: 59.8s\tremaining: 2.23s\n",
            "322:\tlearn: 541.2357586\ttotal: 60s\tremaining: 2.04s\n",
            "323:\tlearn: 541.2296171\ttotal: 1m\tremaining: 1.86s\n",
            "324:\tlearn: 541.1355709\ttotal: 1m\tremaining: 1.67s\n",
            "325:\tlearn: 541.0656884\ttotal: 1m\tremaining: 1.49s\n",
            "326:\tlearn: 541.0644628\ttotal: 1m\tremaining: 1.3s\n",
            "327:\tlearn: 541.0081135\ttotal: 1m\tremaining: 1.11s\n",
            "328:\tlearn: 540.9575790\ttotal: 1m 1s\tremaining: 928ms\n",
            "329:\tlearn: 540.9389793\ttotal: 1m 1s\tremaining: 743ms\n",
            "330:\tlearn: 540.9378121\ttotal: 1m 1s\tremaining: 557ms\n",
            "331:\tlearn: 540.8225736\ttotal: 1m 1s\tremaining: 371ms\n",
            "332:\tlearn: 540.7142901\ttotal: 1m 1s\tremaining: 186ms\n",
            "333:\tlearn: 540.6587394\ttotal: 1m 2s\tremaining: 0us\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<catboost.core.CatBoostRegressor at 0x79aabf69f5e0>"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 테스트 데이터에 대한 예측\n",
        "predictions = model.predict(X_test)"
      ],
      "metadata": {
        "id": "3L6u7nDaikul"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 음수 예측값 조정\n",
        "predictions = np.maximum(0, predictions)"
      ],
      "metadata": {
        "id": "izxBead_ikdc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "submission_df = pd.read_csv('/content/open/sample_submission.csv')\n",
        "# 예측 결과를 제출 파일로 생성\n",
        "submission_df = pd.DataFrame({'ID': test_df['ID'], 'Income': predictions})\n",
        "\n",
        "submission_df.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZRly0NbdgBBq",
        "outputId": "ad3d3dd3-3682-4d20-db43-ca92cca65f3d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          ID       Income\n",
              "0  TEST_0000    33.860821\n",
              "1  TEST_0001     0.000000\n",
              "2  TEST_0002   428.958882\n",
              "3  TEST_0003   685.519011\n",
              "4  TEST_0004     2.255814\n",
              "5  TEST_0005   728.689975\n",
              "6  TEST_0006   408.863021\n",
              "7  TEST_0007     0.532245\n",
              "8  TEST_0008     0.000000\n",
              "9  TEST_0009  1055.355883"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-50d00a71-839d-4681-870e-13914480453d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ID</th>\n",
              "      <th>Income</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>TEST_0000</td>\n",
              "      <td>33.860821</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>TEST_0001</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>TEST_0002</td>\n",
              "      <td>428.958882</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>TEST_0003</td>\n",
              "      <td>685.519011</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>TEST_0004</td>\n",
              "      <td>2.255814</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>TEST_0005</td>\n",
              "      <td>728.689975</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>TEST_0006</td>\n",
              "      <td>408.863021</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>TEST_0007</td>\n",
              "      <td>0.532245</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>TEST_0008</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>TEST_0009</td>\n",
              "      <td>1055.355883</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-50d00a71-839d-4681-870e-13914480453d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-50d00a71-839d-4681-870e-13914480453d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-50d00a71-839d-4681-870e-13914480453d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-4b82b08d-959a-4a93-baed-e31d061fbfc3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4b82b08d-959a-4a93-baed-e31d061fbfc3')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-4b82b08d-959a-4a93-baed-e31d061fbfc3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "submission_df",
              "summary": "{\n  \"name\": \"submission_df\",\n  \"rows\": 10000,\n  \"fields\": [\n    {\n      \"column\": \"ID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10000,\n        \"samples\": [\n          \"TEST_6252\",\n          \"TEST_4684\",\n          \"TEST_1731\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Income\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 375.09485926234964,\n        \"min\": 0.0,\n        \"max\": 1733.703375349725,\n        \"num_unique_values\": 8194,\n        \"samples\": [\n          450.7644065551063,\n          627.6448846130019,\n          413.58666885945183\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**536.0349608491**"
      ],
      "metadata": {
        "id": "6mVxrzh0Cx6x"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "submission_df.to_csv('/content/drive/MyDrive/Colab Notebooks/DACON/소득예측/income(6).csv',index=False)"
      ],
      "metadata": {
        "id": "fcUzy3QWVhf7"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}